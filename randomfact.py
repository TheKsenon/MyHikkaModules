from .. import loader, utils
import aiohttp
import logging

# meta developer: @kmodules
__version__ = (1, 0, 0)

@loader.tds
class RandomFactMod(loader.Module):
    """–†–∞–Ω–¥–æ–º–Ω—ã–µ —Ñ–∞–∫—Ç—ã"""

    strings = {
        "name": "RandomFact",
        "loading": "<emoji document_id=5420239291508868251>‚≠êÔ∏è</emoji> <b>–î—É–º–∞—é –Ω–∞–¥ —Ä–∞–Ω–¥–æ–º–Ω—ã–º —Ñ–∞–∫—Ç–æ–º...</b>",
        "fact": "<emoji document_id=5422847414694330750>ü™ô</emoji> <b>{}</b>",
        "error": "Error occurred while fetching fact. Please try again."
    }
    
    strings_ru = {
        "name": "RandomFact",
        "loading": "<emoji document_id=5420239291508868251>‚≠êÔ∏è</emoji> <b>–î—É–º–∞—é –Ω–∞–¥ —Ä–∞–Ω–¥–æ–º–Ω—ã–º —Ñ–∞–∫—Ç–æ–º...</b>",
        "fact": "<emoji document_id=5422847414694330750>ü™ô</emoji> <b>{}</b>",
        "error": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–∫—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    }

    async def client_ready(self, client, db):
        self.client = client
        
    @loader.command()
    async def randomfact(self, message):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç"""
        await utils.answer(message, self.strings["loading"])
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get('http://aeza.theksenon.pro/v1/api/fact', 
                                    headers={'Content-Type': 'application/json'}) as response:
                    if response.status == 200:
                        fact = await response.text()
                        await utils.answer(message, self.strings["fact"].format(fact))
                    else:
                        await utils.answer(message, self.strings["error"])
        except Exception as e:
            logging.exception(e)
            await utils.answer(message, self.strings["error"])
          
