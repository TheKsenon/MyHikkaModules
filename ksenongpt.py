from .. import loader, utils
import aiohttp
import io
import inspect
import random
import gdown
import os
import requests
from bs4 import BeautifulSoup

# meta developer: @MeKsenon
# üîí      Licensed under the GNU AGPLv3
# meta desc: Generate text and photo - FREE.

# requires: gdown

version = (1, 1, 7)
__version__ = version

# changelog: —Ñ–∏–∫—Å random

@loader.tds
class KsenonGPTMod(loader.Module):
    """ü§ñ –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å KsenonGPT –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""

    strings = {"name": "KsenonGPT"}

    async def client_ready(self, client, db):
        self.client = client
        self._db = db  # Store the database object
        self.github_token = await self.get_github_token()

    async def get_github_token(self):
        token = self._db.get("KsenonGPT", "github_token", None)
        if token:
            return token

        token_file = "github_token.txt"
        if os.path.exists(token_file):
            with open(token_file, "r") as f:
                token = f.read().strip()
        else:
            url = "https://drive.google.com/file/d/14ZyWbeOX5qKBiBAwaxQzuJpJKQ5nChM2/view?usp=drivesdk"
            file_id = url.split("/")[-2]
            download_url = f"https://drive.google.com/uc?id={file_id}"
            try:
                gdown.download(download_url, output=token_file, quiet=False)
                with open(token_file, "r") as f:
                    token = f.read().strip()
            except Exception as e:
                self.log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–∫–µ–Ω–∞ GitHub: {e}")
                return None

        self._db.set("KsenonGPT", "github_token", token)
        return token


    @loader.command()
    async def gpt(self, message):
        """üí¨ –ó–∞–ø—Ä–æ—Å –∫ GPT —Å –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º. .gpt <–∑–∞–ø—Ä–æ—Å>"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, "<emoji document_id=5210952531676504517>‚ùå</emoji><b> –£–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è GPT.</b>")
            return

        await utils.answer(message, '<emoji document_id=5443038326535759644>üí¨</emoji> <b>–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å...</b>')

        url = "http://api.theksenon.pro/api/gpt/generate"
        headers = {"Content-Type": "application/json"}
        prompt = f"{args}"

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(url, headers=headers, json={"prompt": prompt}) as response:
                    response.raise_for_status()
                    gpt_response = await response.text()
                    gpt_response = gpt_response.encode().decode('unicode-escape').replace('{"response":"', '').rstrip('}')

            await utils.answer(message, f'<emoji document_id=5443038326535759644>üí¨</emoji> <b>–ó–∞–ø—Ä–æ—Å:</b> <i>{args}</i>\n\n<emoji document_id=5372981976804366741>ü§ñ</emoji> <b>{gpt_response}</b>')

        except Exception as e:
            await utils.answer(message, f"<emoji document_id=5210952531676504517>‚ùå</emoji><b> –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT: {str(e)}</b>")


    @loader.command()
    async def flux(self, message):
        """üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ, –º–æ–¥–µ–ª—å flux-pro. .flux <prompt>"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, "<emoji document_id=5210952531676504517>‚ùå</emoji><b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. </b>")
            return

        hints = [
            "<emoji document_id=5224607267797606837>‚òÑÔ∏è</emoji> <b>–î–æ–±–∞–≤—å—Ç–µ \"pixel graphic\" —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–∏–∫—Å–µ–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ.</b>",
            "<emoji document_id=5224607267797606837>‚òÑÔ∏è</emoji> <b>–î–æ–±–∞–≤—å—Ç–µ \"4K-hyper realistic\" —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.</b>",
            "<emoji document_id=5224607267797606837>‚òÑÔ∏è</emoji> <b>–î–æ–±–∞–≤—å—Ç–µ \"no blur\" —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —Ä–∞–∑–º—ã—Ç–∏—è.</b>",
            "<emoji document_id=5224607267797606837>‚òÑÔ∏è</emoji> <b>–î–æ–±–∞–≤—å—Ç–µ \"DSC_0123.JPG\" —á—Ç–æ–±—ã –±—ã–ª–æ —Å—É–ø–µ—Ä —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ.</b>",
            "" 
        ]
        hint = random.choice(hints)

        await utils.answer(message, f'<emoji document_id=5431456208487716895>üé®</emoji> <b>–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É </b><i>"{args}"</i>\n{hint}')

        url = "http://api.theksenon.pro/api/flux/generate"
        headers = {"Content-Type": "application/json"}
        data = {"prompt": args}

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(url, headers=headers, json=data) as response:
                    response.raise_for_status()
                    image_url = await response.text()

                async with session.get(image_url) as image_response:
                    image_response.raise_for_status()
                    image_content = io.BytesIO(await image_response.read())

            await message.delete()
            await self.client.send_file(
                message.chat_id,
                image_content,
                caption=(
                    "‚îè <emoji document_id=5372981976804366741>ü§ñ</emoji> <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!</b>\n"
                    "‚îÉ\n"
                    f"‚î£ <emoji document_id=5431456208487716895>üé®</emoji> <b>–ó–∞–ø—Ä–æ—Å:</b> <code>{args}</code>\n"
                    "‚îÉ\n"
                    "‚î£ <emoji document_id=5447410659077661506>üåê</emoji> <b>–ú–æ–¥–µ–ª—å:</b> <i>flux-pro</i>\n"
                    "‚îÉ\n"
                    f"‚îó <emoji document_id=5427009714745517609>‚úÖ</emoji> <b>–°—Å—ã–ª–∫–∞:</b> <a href='{image_url}'>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</a>"
                )
            )
        except aiohttp.ClientError as e:
            await utils.answer(message, f"<emoji document_id=5210952531676504517>‚ùå</emoji><b> –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}</b>")
        except Exception as e:
            await utils.answer(message, f"<emoji document_id=5210952531676504517>‚ùå</emoji><b> –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}</b>")


    @loader.command()
    async def kupdate(self, message):
        """- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥—É–ª—è."""
        module_name = "KsenonGPT"
        module = self.lookup(module_name)
        sys_module = inspect.getmodule(module)

        local_version = sys_module.version
        local_version_str = ".".join(map(str, local_version))

        headers = {"Authorization": f"token {self.github_token}"} if self.github_token else {}
        async with aiohttp.ClientSession(headers=headers) as session:
            async with session.get("https://api.github.com/repos/TheKsenon/MyHikkaModules/contents/ksenongpt.py") as response:
                if response.status == 200:
                    data = await response.json()
                    remote_content = await (await session.get(data['download_url'])).text()
                    remote_lines = remote_content.splitlines()

                    try:
                        version_line = next(line for line in remote_lines if line.strip().startswith("version ="))
                        new_version = tuple(map(int, version_line.split("=", 1)[1].strip().strip("()").replace(",", "").split()))
                        new_version_str = ".".join(map(str, new_version))

                        changelog = next((line.split(":", 1)[1].strip() for line in remote_lines if line.startswith("# changelog:")), "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")

                        if new_version > local_version:
                            await utils.answer(message,
                                f"<emoji document_id=5420323339723881652>‚ö†Ô∏è</emoji> <b>–£ –≤–∞—Å —Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è KsenonGPT!</b>\n\n"
                                f"<emoji document_id=5449683594425410231>üîº</emoji> <b>–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: {new_version_str}</b>\n"
                                f"<emoji document_id=5447183459602669338>üîΩ</emoji> <b>–£ –≤–∞—Å –≤–µ—Ä—Å–∏—è: {local_version_str}</b>\n\n"
                                f"<emoji document_id=5447410659077661506>üåê</emoji> <b>Change-log:</b>\n"
                                f"<emoji document_id=5458603043203327669>üîî</emoji> <i>{changelog}</i>\n\n"
                                f"<emoji document_id=5206607081334906820>‚úîÔ∏è</emoji> <b>–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:</b>\n"
                                f"<code>.dlmod {data['download_url']}</code>"
                            )
                        else:
                            await utils.answer(message,
                                f"<emoji document_id=5370870691140737817>ü•≥</emoji> <b>–£ –≤–∞—Å –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è KsenonGPT!</b>\n\n"
                                f"<emoji document_id=5447644880824181073>‚ö†Ô∏è</emoji><b> –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –º–æ–¥—É–ª—è –ø–æ—á—Ç–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –¥–µ–ª–∞—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –±–∞–≥ —Ñ–∏–∫—Å—ã, —Ç–∞–∫ —á—Ç–æ —á–∞—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ!</b>"
                            )
                    except StopIteration:
                        await utils.answer(message, f"<emoji document_id=5210952531676504517>‚ùå</emoji><b> –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏ –≤ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ.</b>")
                    except Exception as e:
                        await utils.answer(message, f"<emoji document_id=5210952531676504517>‚ùå</emoji><b> –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ—Ä—Å–∏–∏: {str(e)}</b>")
                else:
                    await utils.answer(message, f"<emoji document_id=5210952531676504517>‚ùå</emoji><b> –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ({response.status})</b>")

    @loader.command()
    async def google(self, message):
        """üîé –ò—Å–∫–∞—Ç—å –≤ Google. –ò—Å–ø–æ–ª—å–∑—É–π: .google <–∑–∞–ø—Ä–æ—Å>"""
        args = utils.get_args_raw(message)
        if not args:
            await message.edit("<emoji document_id=5210952531676504517>‚ùå</emoji><b> –£–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞.</b>")
            return

        await message.edit("<emoji document_id=5188311512791393083>üîé</emoji><b>–ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ Google...</b>")

        query = args
        url = f"https://www.google.com/search?q={query}"
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
        }

        try:
            response = requests.get(url, headers=headers)
            response.raise_for_status()
            soup = BeautifulSoup(response.text, "html.parser")

            search_results = soup.find_all("div", class_="g")

            if not search_results:
                await message.edit("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return

            output = "‚îè <emoji document_id=5188311512791393083>üîé</emoji> <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ Google:</b>\n‚îÉ\n"

            for i, result in enumerate(search_results[:3], 1):
                title_elem = result.find("h3")
                description_elem = result.find("div", class_="VwiC3b")
                link_elem = result.find("a")

                title = title_elem.text if title_elem else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                description = description_elem.text.strip() if description_elem else "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è."
                link = link_elem['href'] if link_elem and 'href' in link_elem.attrs else "–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

                output += f"‚î£ {i}Ô∏è‚É£ <b>{title}</b>\n"
                output += f"‚î£ üìë <i>–û–ø–∏—Å–∞–Ω–∏–µ: {description}</i>\n"
                output += f"‚î£ üåê URL: <a href='{link}'>–°—Å—ã–ª–∫–∞</a>\n‚îÉ\n"


            output += "‚îó  <emoji document_id=5427009714745517609>‚úÖ</emoji> KsenonGPT"
            await message.edit(output)

        except requests.RequestException as e:
            await message.edit(f"<emoji document_id=5210952531676504517>‚ùå</emoji><b> –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}</b>")
        except Exception as e:
            await message.edit(f"<emoji document_id=5210952531676504517>‚ùå</emoji><b> –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}</b>")
