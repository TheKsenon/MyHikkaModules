from .. import loader, utils
import aiohttp
import io
import inspect
import gdown
import os
import requests
from bs4 import BeautifulSoup

# meta developer: @MeKsenon

version = (1, 1, 0)
# changelog: –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–∏—Å–∫ –≤ Google

@loader.tds
class KsenonGPTMod(loader.Module):
    """ü§ñ –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å KsenonGPT, –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –ø–æ–∏—Å–∫–∞ –≤ Google"""

    strings = {"name": "KsenonGPT"}

    async def client_ready(self, client, db):
        self.client = client
        self.github_token = await self.get_github_token()

    async def get_github_token(self):
        token_file = "github_token.txt"
        if os.path.exists(token_file):
            with open(token_file, "r") as f:
                return f.read().strip()
        else:
            url = "https://drive.google.com/file/d/14ZyWbeOX5qKBiBAwaxQzuJpJKQ5nChM2/view?usp=drivesdk"
            file_id = url.split("/")[-2]
            download_url = f"https://drive.google.com/uc?id={file_id}"
            try:
                gdown.download(download_url, output=token_file, quiet=False)
                with open(token_file, "r") as f:
                    token = f.read().strip()
                return token
            except Exception as e:
                self.log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–∫–µ–Ω–∞ GitHub: {e}")
                return None

    @loader.command()
    async def gpt(self, message):
        """üí¨ –ó–∞–ø—Ä–æ—Å –∫ GPT —Å –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º. gpt <–∑–∞–ø—Ä–æ—Å>"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, "<emoji document_id=5210952531676504517>‚ùå</emoji><b> –£–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è GPT.</b>")
            return

        await utils.answer(message, '<emoji document_id=5443038326535759644>üí¨</emoji> <b>–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å...</b>')

        url = "http://theksenon.pro/api/gpt/generate"
        headers = {"Content-Type": "application/json"}
        prompt = f"{args}"

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(url, headers=headers, json={"prompt": prompt}) as response:
                    response.raise_for_status()
                    gpt_response = await response.text()
                    gpt_response = gpt_response.encode().decode('unicode-escape').replace('{"response":"', '').rstrip('}')

            await utils.answer(message, f'<emoji document_id=5443038326535759644>üí¨</emoji> <b>–ó–∞–ø—Ä–æ—Å:</b> <i>{args}</i>\n\n<emoji document_id=5372981976804366741>ü§ñ</emoji> <b>{gpt_response}</b>')

        except Exception as e:
            await utils.answer(message, f"<emoji document_id=5210952531676504517>‚ùå</emoji><b> –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT: {str(e)}</b>")

    @loader.command()
    async def flux(self, message):
        """üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ, –º–æ–¥–µ–ª—å flux-pro. .flux <prompt>"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, "<emoji document_id=5210952531676504517>‚ùå</emoji><b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. </b>")
            return

        await utils.answer(message, f'<emoji document_id=5431456208487716895>üé®</emoji> <b>–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É </b><i>"{args}"</i>')

        url = "http://theksenon.pro/api/flux/generate"
        headers = {"Content-Type": "application/json"}
        data = {"prompt": args}

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(url, headers=headers, json=data) as response:
                    response.raise_for_status()
                    image_url = await response.text()

                async with session.get(image_url) as image_response:
                    image_response.raise_for_status()
                    image_content = io.BytesIO(await image_response.read())

            await message.delete()
            await self.client.send_file(
                message.chat_id,
                image_content,
                caption=f'<emoji document_id=5431456208487716895>üé®</emoji> <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É:</b> <i>"{args}"</i>',
                reply_to=message.reply_to_msg_id
            )
        except Exception as e:
            await utils.answer(message, f"<emoji document_id=5210952531676504517>‚ùå</emoji><b> –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}</b>")

    @loader.command()
    async def google(self, message):
        """üîé –ü–æ–∏—Å–∫ –≤ Google. .google <–∑–∞–ø—Ä–æ—Å>"""
        query = utils.get_args_raw(message)
        if not query:
            await utils.answer(message, "<emoji document_id=5210952531676504517>‚ùå</emoji><b> –£–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ Google.</b>")
            return

        await utils.answer(message, "<emoji document_id=5188311512791393083>üîé</emoji><b>–ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ Google...</b>")

        url = f"https://www.google.com/search?q={query}"
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
        }

        try:
            response = requests.get(url, headers=headers)
            response.raise_for_status()
            soup = BeautifulSoup(response.text, "html.parser")

            search_results = soup.find_all("div", class_="g")

            if not search_results:
                await utils.answer(message, "<emoji document_id=5210952531676504517>‚ùå</emoji><b> –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</b>")
                return

            result_text = "‚îè <emoji document_id=5188311512791393083>üîé</emoji> <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ Google:</b>\n‚îÉ\n"

            for i, result in enumerate(search_results[:3], 1):
                title = result.find("h3")
                description = result.find("div", class_="VwiC3b")
                link = result.find("a")

                if title and description and link:
                    result_text += f"‚î£ {i}Ô∏è‚É£ <b>{title.text}</b>\n"
                    result_text += f"‚î£ üìë <i>–û–ø–∏—Å–∞–Ω–∏–µ: {description.text.strip()}</i>\n"
                    result_text += f"‚î£ üåê URL: <a href='{link['href']}'>–°—Å—ã–ª–∫–∞</a>\n"
                else:
                    result_text += f"‚î£ {i}Ô∏è‚É£ –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.\n"
                
                if i < 3:
                    result_text += "‚îÉ\n"

            result_text += "‚îÉ\n"
            result_text += "‚îó <emoji document_id=5427009714745517609>‚úÖ</emoji> KsenonGPT"

            await utils.answer(message, result_text)

        except Exception as e:
            await utils.answer(message, f"<emoji document_id=5210952531676504517>‚ùå</emoji><b> –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ Google: {str(e)}</b>")
