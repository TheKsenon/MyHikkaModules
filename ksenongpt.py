from .. import loader, utils
import requests
import io
import aiohttp
import inspect

# meta developer: Ksenon | MeKsenon

version = (1, 0, 3)
# changelog: amogus–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ –∫–æ–º–∞–Ω–¥–µ flux

@loader.tds
class KsenonGPTMod(loader.Module):
    """ü§ñ –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å KsenonGPT –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""

    strings = {"name": "KsenonGPT"}

    async def client_ready(self, client, db):
        self.client = client

    @loader.command()
    async def gpt(self, message):
        """üí¨ –ó–∞–ø—Ä–æ—Å –∫ GPT —Å –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º. gpt <–∑–∞–ø—Ä–æ—Å>"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, "<emoji document_id=5210952531676504517>‚ùå</emoji><b> –£–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è GPT.</b>")
            return

        await utils.answer(
            message,
            '<emoji document_id=5443038326535759644>üí¨</emoji> <b>–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å...</b>'
        )

        url = "http://theksenon.pro/api/gpt/generate"
        headers = {"Content-Type": "application/json"}
        prompt = f"{args}"

        try:
            response = requests.post(url, headers=headers, json={"prompt": prompt})
            response.raise_for_status()
            gpt_response = response.text.strip()
            gpt_response = gpt_response.encode().decode('unicode-escape').replace('{"response":"', '').rstrip('}')

            await utils.answer(
                message,
                f'<emoji document_id=5443038326535759644>üí¨</emoji> <b>–ó–∞–ø—Ä–æ—Å:</b> <i>{args}</i>\n\n<emoji document_id=5372981976804366741>ü§ñ</emoji> <b>{gpt_response}</b>'
            )

        except Exception as e:
            await utils.answer(message, f"<emoji document_id=5210952531676504517>‚ùå</emoji><b> –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT: {str(e)}</b>")

    @loader.command()
    async def flux(self, message):
        """üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ, –º–æ–¥–µ–ª—å flux-pro. .flux <prompt>"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, "<emoji document_id=5210952531676504517>‚ùå</emoji><b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. </b>")
            return

        await utils.answer(
            message,
            f'<emoji document_id=5431456208487716895>üé®</emoji> <b>–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É </b><i>"{args}"</i>'
        )

        url = "http://theksenon.pro/api/flux/generate"
        headers = {"Content-Type": "application/json"}
        data = {"prompt": args}

        try:
            response = requests.post(url, headers=headers, json=data)
            response.raise_for_status()
            image_url = response.text.strip()

            image_response = requests.get(image_url)
            image_response.raise_for_status()
            image_content = io.BytesIO(image_response.content)

            await message.delete()
            await self.client.send_file(
                message.chat_id,
                image_content,
                caption=(
                    "‚îè <emoji document_id=5372981976804366741>ü§ñ</emoji> <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!</b>\n"
                    "‚îÉ\n"
                    f"‚î£ <emoji document_id=5431456208487716895>üé®</emoji> <b>–ó–∞–ø—Ä–æ—Å:</b> <i>{args}</i>\n"
                    "‚îÉ\n"
                    "‚î£ <emoji document_id=5447410659077661506>üåê</emoji> <b>–ú–æ–¥–µ–ª—å:</b> <i>flux-pro</i>\n"
                    "‚îÉ\n"
                    f"‚îó <emoji document_id=5427009714745517609>‚úÖ</emoji> <b>–°—Å—ã–ª–∫–∞:</b> <a href='{image_url}'>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</a>"
                )
            )
        except requests.RequestException as e:
            await utils.answer(message, f"<emoji document_id=5210952531676504517>‚ùå</emoji><b> –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}</b>")
        except Exception as e:
            await utils.answer(message, f"<emoji document_id=5210952531676504517>‚ùå</emoji><b> –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}</b>")

    @loader.command()
    async def kupdate(self, message):
        """- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥—É–ª—è."""
        module_name = "KsenonGPT"
        module = self.lookup(module_name)
        sys_module = inspect.getmodule(module)

        local_version = sys_module.version
        local_version_str = ".".join(map(str, local_version))

        async with aiohttp.ClientSession() as session:
            async with session.get("https://raw.githubusercontent.com/TheKsenon/MyHikkaModules/refs/heads/main/ksenongpt.py") as response:
                if response.status == 200:
                    remote_content = await response.text()
                    remote_lines = remote_content.splitlines()

                    new_version = tuple(map(int, remote_lines[0].split("=", 1)[1].strip().strip("()").replace(",", "").split()))
                    new_version_str = ".".join(map(str, new_version))

                    changelog = next((line.split(":", 1)[1].strip() for line in remote_lines if line.startswith("# changelog:")), "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")

                    if new_version > local_version:
                        await utils.answer(message, 
                            f"<emoji document_id=5420323339723881652>‚ö†Ô∏è</emoji> <b>–£ –≤–∞—Å —Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è KsenonGPT!</b>\n\n"
                            f"<emoji document_id=5449683594425410231>üîº</emoji> <b>–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: {new_version_str}</b>\n"
                            f"<emoji document_id=5447183459602669338>üîΩ</emoji> <b>–£ –≤–∞—Å –≤–µ—Ä—Å–∏—è: {local_version_str}</b>\n\n"
                            f"<emoji document_id=5447410659077661506>üåê</emoji> <b>Change-log:</b>\n"
                            f"<emoji document_id=5458603043203327669>üîî</emoji> <i>{changelog}</i>\n\n"
                            f"<emoji document_id=5206607081334906820>‚úîÔ∏è</emoji> <b>–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:</b>\n"
                            f"<code>.dlmod https://raw.githubusercontent.com/TheKsenon/MyHikkaModules/refs/heads/main/ksenongpt.py</code>"
                        )
                    else:
                        await utils.answer(message,
                            f"<emoji document_id=5370870691140737817>ü•≥</emoji> <b>–£ –≤–∞—Å –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è KsenonGPT!</b>\n\n"
                            f"<emoji document_id=5447644880824181073>‚ö†Ô∏è</emoji><b> –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –º–æ–¥—É–ª—è –ø–æ—á—Ç–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –¥–µ–ª–∞—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –±–∞–≥ —Ñ–∏–∫—Å—ã, —Ç–∞–∫ —á—Ç–æ —á–∞—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ!</b>"
                        )
                else:
                    await utils.answer(message, f"<emoji document_id=5210952531676504517>‚ùå</emoji><b> –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b>")
