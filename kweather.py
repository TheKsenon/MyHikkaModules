from .. import loader, utils
import aiohttp

@loader.tds
class WeatherMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–≥–æ–¥—ã"""

    strings = {
        "name": "K:Weather",
        "no_city": "<emoji document_id=5465665476971471368>‚ùå</emoji> <b>–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥</b>!",
        "error": "<emoji document_id=5465665476971471368>‚ùå</emoji> <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã</b>.",
        "weather": "<emoji document_id=5431449001532594346>‚ö°Ô∏è</emoji> <b>–ü–æ–≥–æ–¥–∞ –≤ {}</b>\n\n"
        "<emoji document_id=5397575638146110953>üåé</emoji> <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ: {}</b>\n"
        "<emoji document_id=5420315771991497307>üî•</emoji> <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {}¬∞C</b>\n"
        "<emoji document_id=5427042798878610107>üåà</emoji> <b>–í–µ—Ç–µ—Ä: {} –∫–º/—á</b>\n"
        "<emoji document_id=5282833267551117457>üå®</emoji> <b>–í–ª–∞–∂–Ω–æ—Å—Ç—å: {}%</b>"
    }

    async def weathercmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .weather <–≥–æ—Ä–æ–¥>"""
        args = utils.get_args_raw(message)
        
        if not args:
            await utils.answer(message, self.strings["no_city"])
            return

        async with aiohttp.ClientSession() as session:
            try:
                async with session.get(f"https://wttr.in/{args}?format=j1&lang=ru") as response:
                    if response.status != 200:
                        await utils.answer(message, self.strings["error"])
                        return
                    
                    weather_data = await response.json()
                    current = weather_data["current_condition"][0]
                    
                    await utils.answer(
                        message,
                        self.strings["weather"].format(
                            args,
                            current["lang_ru"][0]["value"],
                            current["temp_C"],
                            current["windspeedKmph"],
                            current["humidity"]
                        )
                    )
            except Exception:
                await utils.answer(message, self.strings["error"])
              
