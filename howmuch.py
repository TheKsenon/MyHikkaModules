from .. import loader, utils
from telethon.tl.types import Message
import random
import json
from io import BytesIO
from ..inline.types import InlineCall

# meta developer: @kmodules
__version__ = (1, 0, 0)

@loader.tds
class HowMuchMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å–∫–æ–ª—å–∫–æ –≤—ã ..."""
    
    strings = {
        "name": "HowMuch",
        "no_template": "<emoji document_id=5219901967916084166>üí•</emoji> <b>–®–∞–±–ª–æ–Ω {} –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>",
        "template_exists": "<emoji document_id=5220070652756635426>üëÄ</emoji> <b>–®–∞–±–ª–æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.</b>",
        "template_added": "<emoji document_id=5219899949281453881>‚úÖ</emoji> <b>–®–∞–±–ª–æ–Ω –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω.</b>",
        "template_deleted": "<emoji document_id=5260424249914435335>‚ô®Ô∏è</emoji> <b>–®–∞–±–ª–æ–Ω {} –±—ã–ª —É–¥–∞–ª—ë–Ω.</b>",
        "templates": "<emoji document_id=5420239291508868251>‚≠êÔ∏è</emoji> <b>–®–∞–±–ª–æ–Ω—ã:</b>\n\n{}\n\n<emoji document_id=5116368680279606270>‚ô•Ô∏è</emoji><b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —à–∞–±–ª–æ–Ω—ã —á–µ—Ä–µ–∑ .howmuch &lt;—à–∞–±–ª–æ–Ω&gt;.\n</b><emoji document_id=5085022089103016925>‚ö°Ô∏è</emoji><b> –°–æ–∑–¥–∞–π—Ç–µ —à–∞–±–ª–æ–Ω —á–µ—Ä–µ–∑</b> <b>.addtemplate &lt;title&gt; &lt;emoji&gt;</b>",
        "backup_done": "<emoji document_id=5251429849662243654>ü¶ã</emoji> <b>–ë—ç–∫–∞–ø —à–∞–±–ª–æ–Ω–æ–≤.</b>",
        "restore_done": "<emoji document_id=5251333384696776743>‚ö°Ô∏è</emoji> <b>–®–∞–±–ª–æ–Ω—ã –±—ã–ª–∏ –≤—Å—Ç–∞–≤–ª–µ–Ω—ã.</b>",
        "no_reply": "<emoji document_id=5219901967916084166>üí•</emoji> <b>–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Ñ–∞–π–ª —Å —à–∞–±–ª–æ–Ω–∞–º–∏.</b>"
    }

    def __init__(self):
        self.default_templates = {
            "–∫—Ä—É—Ç–æ–π": "üòé",
            "–≥–µ–π": "üè≥Ô∏è‚Äçüåà", 
            "—É–º–Ω—ã–π": "ü§ì",
            "—Å–º–µ–ª—ã–π": "ü•±",
            "–±—ã—Å—Ç—Ä—ã–π": "üò∂‚Äçüå´Ô∏è",
            "—Å–µ–∫—Ä–µ—Ç–Ω—ã–π": "üîë",
            "—Å–≤–æ–±–æ–¥–Ω—ã–π": "üóª",
            "—Å–∏–ª—å–Ω—ã–π": "üèãÔ∏è‚Äç‚ôÇÔ∏è",
            "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç": "üë®‚Äçüíª",
            "—É—á–∏—Ç–µ–ª—å": "üë®‚Äçüè´",
            "—Ä–æ–±–æ—Ç": "ü§ñ",
            "—É–¥–∞—á–Ω—ã–π": "üçÄ"
        }
        
        self.config = loader.ModuleConfig(
            "templates",
            self.default_templates.copy(),
            "–ö–æ–Ω—Ñ–∏–≥ —à–∞–±–ª–æ–Ω–æ–≤",
            "buttons",
            False,
            "–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∫–Ω–æ–ø–∫—É –ü–µ—Ä–µ–ø—Ä–æ–π—Ç–∏"
        )

    def get_result(self, emoji, template, percent):
        return f"<b>{emoji} –í—ã {template} –Ω–∞ <i>{percent}%</i> –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤!</b>"

    def get_template(self, query: str):
        query = query.lower()
        for template in self.config["templates"]:
            if template.lower() == query:
                return template
        return None

    @loader.command() 
    async def howmuch(self, message: Message):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å–∫–æ–ª—å–∫–æ –≤—ã –ø–æ–¥—Ö–æ–¥–∏—Ç–µ –ø–æ–¥ —à–∞–±–ª–æ–Ω"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings["no_template"].format(""))
            return
            
        template = self.get_template(args)
        if not template:
            await utils.answer(message, self.strings["no_template"].format(args))
            return

        percent = random.randint(0, 100)
        emoji = self.config["templates"][template]
        result_text = self.get_result(emoji, template, percent)
        
        if self.config["buttons"]:
            await self.inline.form(
                message=message,
                text=result_text,
                reply_markup=[
                    [{"text": f"{emoji} –ü–µ—Ä–µ–ø—Ä–æ–π—Ç–∏", "callback": self.retry_callback, "args": (template,)}]
                ]
            )
        else:
            await utils.answer(message, result_text)

    async def retry_callback(self, call: InlineCall, template: str):
        percent = random.randint(0, 100)
        emoji = self.config["templates"][template]
        await call.edit(
            text=self.get_result(emoji, template, percent),
            reply_markup=[
                [{"text": f"{emoji} –ü–µ—Ä–µ–ø—Ä–æ–π—Ç–∏", "callback": self.retry_callback, "args": (template,)}]
            ]
        )

    @loader.command()
    async def templates(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤"""
        templates_text = ""
        for i, (template, emoji) in enumerate(self.config["templates"].items(), 1):
            templates_text += f"{i}. {template} -> {emoji}\n"
            
        await utils.answer(
            message,
            self.strings["templates"].format(f"<b>{templates_text}</b>")
        )

    @loader.command()
    async def addtemplate(self, message: Message):
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω"""
        args = utils.get_args_raw(message)
        if not args or len(args.split()) != 2:
            await utils.answer(message, self.strings["no_template"].format(""))
            return

        title, emoji = args.split()
        title_lower = title.lower()
        
        for template in self.config["templates"]:
            if template.lower() == title_lower:
                await utils.answer(message, self.strings["template_exists"])
                return

        self.config["templates"][title] = emoji
        await utils.answer(message, self.strings["template_added"])

    @loader.command()
    async def deltemplate(self, message: Message):
        """–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —à–∞–±–ª–æ–Ω"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings["no_template"].format(""))
            return

        template = self.get_template(args)
        if not template:
            await utils.answer(message, self.strings["no_template"].format(args))
            return

        if template in self.default_templates:
            await utils.answer(message, self.strings["no_template"].format(args))
            return

        del self.config["templates"][template]
        await utils.answer(message, self.strings["template_deleted"].format(template))

    @loader.command()
    async def backupts(self, message: Message):
        """–°–¥–µ–ª–∞—Ç—å –±—ç–∫–∞–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤"""
        user_templates = {}
        for template, emoji in self.config["templates"].items():
            if template not in self.default_templates:
                user_templates[template] = emoji
                
        backup = json.dumps(user_templates, indent=2, ensure_ascii=False)
        file = BytesIO(backup.encode())
        file.name = "templates_backup.json"
        
        await message.respond(
            self.strings["backup_done"],
            file=file
        )

    @loader.command()
    async def restorets(self, message: Message):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω—ã –∏–∑ –±—ç–∫–∞–ø–∞"""
        reply = await message.get_reply_message()
        if not reply or not reply.document:
            await utils.answer(message, self.strings["no_reply"])
            return

        try:
            data = json.loads((await reply.download_media(bytes)).decode())
            templates = self.config["templates"].copy()
            templates.update(data)
            self.config["templates"] = templates
            await utils.answer(message, self.strings["restore_done"])
        except Exception:
            await utils.answer(message, self.strings["no_reply"])
