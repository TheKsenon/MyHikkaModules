from .. import loader, utils
import datetime
import time
import random

# meta developer: @kmodules
__version__ = (1, 0, 0)

@loader.tds
class CountTimeModule(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Ä–∞–∑–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π, –í–†–ï–ú–Ø –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ, –ø–æ—Ç–æ–º—É —á—Ç–æ —É –≤–∞—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Ç–∞–∫–æ–µ –≤—Ä–µ–º—è. –ù–∞ Termux –≤—Ä–µ–º—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ..."""
    
    strings = {
        "name": "CountTime",
        "newyear_hints": [
            "Time to make New Year resolutions!",
            "Get ready for the countdown!",
            "New Year, new beginnings!",
            "Time to prepare the champagne!",
            "Ready for midnight magic?"
        ],
        "winter_hints": [
            "Winter wonderland is coming!",
            "Time for hot chocolate!",
            "Snowflakes will fall soon!",
            "Get your winter clothes ready!",
            "Winter magic approaches!"
        ],
        "spring_hints": [
            "Spring flowers are on their way!",
            "Birds will sing again soon!",
            "Nature is preparing to bloom!",
            "Spring rain will refresh everything!",
            "Time for new beginnings!"
        ],
        "summer_hints": [
            "Beach time is coming!",
            "Get ready for sunny days!",
            "Summer adventures await!",
            "Ice cream season approaches!",
            "Time for vacation plans!"
        ],
        "autumn_hints": [
            "Fall colors are coming!",
            "Time for cozy sweaters!",
            "Falling leaves season ahead!",
            "Pumpkin spice everything!",
            "Autumn magic is near!"
        ]
    }
    
    strings_ru = {
        "name": "CountTime",
        "newyear_hints": [
            "–ü–æ—Ä–∞ –∑–∞–≥–∞–¥—ã–≤–∞—Ç—å –∂–µ–ª–∞–Ω–∏—è!",
            "–ì–æ—Ç–æ–≤–∏–º—Å—è –∫ –æ–±—Ä–∞—Ç–Ω–æ–º—É –æ—Ç—Å—á–µ—Ç—É!",
            "–ù–æ–≤—ã–π –≥–æ–¥ = –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!",
            "–ü–∞—Ü–∞–Ω—ã, –≥–æ—Ç–æ–≤–∏–º —à–∞–º–ø–∞–Ω—Å–∫–æ–µ!",
            "–î–µ—Ä–∂–∏–º—Å—è, –¥–µ—Ä–∂–∏–º—Å—è..."
            "–°–∫–æ—Ä–æ –≤–æ–ª—à–µ–±–Ω–∞—è –Ω–æ—á—å!"
        ],
        "winter_hints": [
            "–°–∫–æ—Ä–æ –∑–∏–º–Ω—è—è —Å–∫–∞–∑–∫–∞!",
            "–í—Ä–µ–º—è –≥–æ—Ä—è—á–µ–≥–æ —à–æ–∫–æ–ª–∞–¥–∞!",
            "–ú–∞–º, –ø–æ–¥–∞—Ä–∏ —à–æ–∫–æ–ª–∞–¥."
            "–°–∫–æ—Ä–æ –ø–æ–π–¥–µ—Ç —Å–Ω–µ–≥!",
            "–ì–æ—Ç–æ–≤—å —Ç–µ–ø–ª—É—é –æ–¥–µ–∂–¥—É!",
            "–ó–∏–º–Ω–µ–µ –≤–æ–ª—à–µ–±—Å—Ç–≤–æ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è!"
        ],
        "spring_hints": [
            "–í–µ—Å–µ–Ω–Ω–∏–µ —Ü–≤–µ—Ç—ã —É–∂–µ –≤ –ø—É—Ç–∏!",
            "–°–∫–æ—Ä–æ –∑–∞–ø–æ—é—Ç –ø—Ç–∏—Ü—ã!",
            "–ï—â–µ –Ω–µ–º–Ω–æ–≥–æ..."
            "–ü—Ä–∏—Ä–æ–¥–∞ –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ —Ü–≤–µ—Ç–µ–Ω–∏—é!",
            "–í–µ—Å–µ–Ω–Ω–∏–µ –¥–æ–∂–¥–∏ –æ—Å–≤–µ–∂–∞—Ç –≤—Å—ë –≤–æ–∫—Ä—É–≥!",
            "–í—Ä–µ–º—è –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π!"
        ],
        "summer_hints": [
            "–°–∫–æ—Ä–æ –Ω–∞ –ø–ª—è–∂!",
            "–í–∫–ª—é—á–∞–µ–º –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä?"
            "–ì–æ—Ç–æ–≤—å—Å—è –∫ —Å–æ–ª–Ω–µ—á–Ω—ã–º –¥–Ω—è–º!",
            "–õ–µ—Ç–Ω–∏–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –∂–¥—É—Ç!",
            "–°–µ–∑–æ–Ω –º–æ—Ä–æ–∂–µ–Ω–æ–≥–æ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è!",
            "–í—Ä–µ–º—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—É—Å–∫!"
        ],
        "autumn_hints": [
            "–ó–æ–ª–æ—Ç–∞—è –æ—Å–µ–Ω—å!",
            "–í—Ä–µ–º—è —É—é—Ç–Ω—ã—Ö —Å–≤–∏—Ç–µ—Ä–æ–≤!",
            "–ü—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è —Å–µ–∑–æ–Ω –ø–∞–¥–∞—é—â–∏—Ö –ª–∏—Å—Ç—å–µ–≤!",
            "–¢—ã–∫–≤–µ–Ω–Ω—ã–π –ª–∞—Ç—Ç–µ —É–∂–µ –∂–¥–µ—Ç!",
            "–û—Å–µ–Ω–Ω–µ–µ –≤–æ–ª—à–µ–±—Å—Ç–≤–æ –±–ª–∏–∑–∫–æ!"
        ]
    }

    def __init__(self):
        self.seasons = {
            'winter': (12, 1, 2),
            'spring': (3, 4, 5),
            'summer': (6, 7, 8),
            'autumn': (9, 10, 11)
        }

    def _get_next_date(self, month, day):
        now = datetime.datetime.now()
        year = now.year
        
        target = datetime.datetime(year, month, day)
        if target < now:
            target = datetime.datetime(year + 1, month, day)
            
        return target

    def _get_next_season(self, season):
        now = datetime.datetime.now()
        year = now.year
        
        if season == 'winter':
            return self._get_next_date(12, 1)
        elif season == 'spring':
            return self._get_next_date(3, 1)
        elif season == 'summer':
            return self._get_next_date(6, 1)
        else: 
            return self._get_next_date(9, 1)

    def _format_time_left(self, target):
        now = datetime.datetime.now()
        diff = target - now
        
        days = diff.days
        hours = diff.seconds // 3600
        seconds = diff.seconds % 3600
        
        return f"| {days} –¥–Ω–µ–π | {hours} —á–∞—Å–æ–≤ | {seconds} —Å–µ–∫—É–Ω–¥ |"

    @loader.command()
    async def nytime(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –¥–æ –Ω–æ–≤–æ–≥–æ –≥–æ–¥–∞"""
        next_ny = self._get_next_date(1, 1)
        time_left = self._format_time_left(next_ny)
        hint = random.choice(self.strings['newyear_hints'])
        
        await utils.answer(
            message,
            f"<emoji document_id=5287722241709057624>üòâ</emoji> <b>–î–æ –Ω–æ–≤–æ–≥–æ –≥–æ–¥–∞ –æ—Å—Ç–∞–ª–æ—Å—å:</b>\n\n"
            f"<blockquote>{time_left}</blockquote>\n\n"
            f"<emoji document_id=5463144094945516339>üëç</emoji> <b>{hint}</b>"
        )

    @loader.command()
    async def wintertime(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –¥–æ –∑–∏–º—ã"""
        next_winter = self._get_next_season('winter')
        time_left = self._format_time_left(next_winter)
        hint = random.choice(self.strings['winter_hints'])
        
        await utils.answer(
            message,
            f"<emoji document_id=5201743825441145795>‚ùÑÔ∏è</emoji> <b>–î–æ –∑–∏–º—ã –æ—Å—Ç–∞–ª–æ—Å—å:</b>\n\n"
            f"<blockquote>{time_left}</blockquote>\n\n"
            f"<emoji document_id=5463144094945516339>üëç</emoji> <b>{hint}</b>"
        )

    @loader.command()
    async def springtime(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –¥–æ –≤–µ—Å–Ω—ã"""
        next_spring = self._get_next_season('spring')
        time_left = self._format_time_left(next_spring)
        hint = random.choice(self.strings['spring_hints'])
        
        await utils.answer(
            message,
            f"<emoji document_id=5195140682590722632>üè†</emoji> <b>–î–æ –≤–µ—Å–Ω—ã –æ—Å—Ç–∞–ª–æ—Å—å:</b>\n\n"
            f"<blockquote>{time_left}</blockquote>\n\n"
            f"<emoji document_id=5463144094945516339>üëç</emoji> <b>{hint}</b>"
        )

    @loader.command()
    async def summertime(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –¥–æ –ª–µ—Ç–∞"""
        next_summer = self._get_next_season('summer')
        time_left = self._format_time_left(next_summer)
        hint = random.choice(self.strings['summer_hints'])
        
        await utils.answer(
            message,
            f"<emoji document_id=5472178859300363509>üèñÔ∏è</emoji> <b>–î–æ –ª–µ—Ç–∞ –æ—Å—Ç–∞–ª–æ—Å—å:</b>\n\n"
            f"<blockquote>{time_left}</blockquote>\n\n"
            f"<emoji document_id=5463144094945516339>üëç</emoji> <b>{hint}</b>"
        )

    @loader.command()
    async def autumntime(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –¥–æ –æ—Å–µ–Ω–∏"""
        next_autumn = self._get_next_season('autumn')
        time_left = self._format_time_left(next_autumn)
        hint = random.choice(self.strings['autumn_hints'])
        
        await utils.answer(
            message,
            f"<emoji document_id=5416034540000910728>ü§ß</emoji> <b>–î–æ –æ—Å–µ–Ω–∏ –æ—Å—Ç–∞–ª–æ—Å—å:</b>\n\n"
            f"<blockquote>{time_left}</blockquote>\n\n"
            f"<emoji document_id=5463144094945516339>üëç</emoji> <b>{hint}</b>"
        )
      
